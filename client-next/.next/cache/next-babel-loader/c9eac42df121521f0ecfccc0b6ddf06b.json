{"ast":null,"code":"var _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _require = require(\"./utils\"),\n    _hash = _require._hash;\n\nvar CAMP_FAMILY = \"votingSystem\";\n\nvar CAMP_NAMESPACE = _hash(CAMP_FAMILY).substring(0, 6);\n\nvar _makeCampaignAddress = function _makeCampaignAddress(x) {\n  return CAMP_NAMESPACE + _hash(x);\n};\n\nvar _deserialize = function _deserialize(data) {\n  var campaignsIterable = data.split(\"|\").map(function (stateStr) {\n    return stateStr.split(\";\");\n  }).map(function (stateSplitted) {\n    var _stateSplitted = _slicedToArray(stateSplitted, 5),\n        name = _stateSplitted[0],\n        parties = _stateSplitted[1],\n        count = _stateSplitted[2],\n        state = _stateSplitted[3],\n        admins = _stateSplitted[4];\n\n    return [name, {\n      name: name,\n      parties: parties,\n      count: count,\n      state: state,\n      admins: admins\n    }];\n  });\n  return new Map(campaignsIterable);\n};\n\nvar _serialize = function _serialize(campaigns) {\n  var campaignStrs = [];\n  /* \r\n    the var {nameCampaign} is because this field is of the following format\r\n    [<campaign name>, <campaign deserialized data>]\r\n    Such as:\r\n    [\r\n      'campaign_name',\r\n      {\r\n        name: 'campaign_name',\r\n        parties: \"likud,kachol-lavan\",\r\n        count: '120,23',\r\n        state: 'OPEN',\r\n        admins: \"12as3..ds94jf,s8a7...394mfh\"\r\n      }\r\n    ]\r\n    That is a special form to give to a map constructor\r\n    so it builds the following map:\r\n    Map {\r\n      'campaign_name' => {\r\n        name: \"campaign_name\",\r\n        parties: \"likud,kachol-lavan\",\r\n        count: '120,23',\r\n        state: 'OPEN',\r\n        admins: \"12as3..ds94jf,s8a7...394mfh\"\r\n      }\r\n    }\r\n  */\n\n  var _iterator = _createForOfIteratorHelper(campaigns),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var nameCampaign = _step.value;\n\n      var _nameCampaign = _slicedToArray(nameCampaign, 2),\n          name = _nameCampaign[0],\n          campaign = _nameCampaign[1];\n\n      var parties = campaign.parties,\n          count = campaign.count,\n          state = campaign.state,\n          admins = campaign.admins;\n      campaignStrs.push([name, parties, count, state, admins].join(\";\"));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  campaignStrs.sort();\n  return Buffer.from(campaignStrs.join(\"|\"));\n};\n\nvar _campaignToString = function _campaignToString(campaign) {\n  var name = campaign.name,\n      parties = campaign.parties,\n      count = campaign.count,\n      state = campaign.state; // PARSE NUMBERS!!!!!!!!!!!!!!!\n\n  count = count.split(\",\").map(function (num) {\n    return parseInt(num);\n  });\n  parties = parties.split(\",\");\n  var res = [\"Campaign: \".concat(name), \"Status: \".concat(state)];\n  var sum = count.reduce(function (acc, curr) {\n    return acc + curr;\n  }, 0);\n  var voteStatus = {};\n\n  for (var ind in parties) {\n    var party = parties[ind];\n    var partyCount = count[ind];\n    voteStatus[party] = partyCount / sum * 100;\n  }\n\n  res = res.concat(parties.map(function (party, ind) {\n    return \"\".concat(party, \": \").concat(\"|\".repeat(Math.round(voteStatus[party]))).concat(\"-\".repeat(100 - Math.round(voteStatus[party])), \" \").concat(count[ind], \"(\").concat(voteStatus[party], \"%)\");\n  }));\n  return res.join(\"\\n\");\n};\n\nmodule.exports = {\n  CAMP_NAMESPACE: CAMP_NAMESPACE,\n  CAMP_FAMILY: CAMP_FAMILY,\n  _serialize: _serialize,\n  _deserialize: _deserialize,\n  _makeCampaignAddress: _makeCampaignAddress,\n  _campaignToString: _campaignToString\n};","map":{"version":3,"sources":["C:/Users/sagi.levi/DevProjects/sawtooth-dev/client-next/src/BlockchainModules/Family.js"],"names":["require","_hash","CAMP_FAMILY","CAMP_NAMESPACE","substring","_makeCampaignAddress","x","_deserialize","data","campaignsIterable","split","map","stateStr","stateSplitted","name","parties","count","state","admins","Map","_serialize","campaigns","campaignStrs","nameCampaign","campaign","push","join","sort","Buffer","from","_campaignToString","num","parseInt","res","sum","reduce","acc","curr","voteStatus","ind","party","partyCount","concat","repeat","Math","round","module","exports"],"mappings":"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","sourcesContent":["const { _hash } = require(\"./utils\");\r\n\r\nconst CAMP_FAMILY = \"votingSystem\";\r\nconst CAMP_NAMESPACE = _hash(CAMP_FAMILY).substring(0, 6);\r\nconst _makeCampaignAddress = (x) => CAMP_NAMESPACE + _hash(x);\r\nconst _deserialize = (data) => {\r\n  let campaignsIterable = data\r\n    .split(\"|\")\r\n    .map((stateStr) => stateStr.split(\";\"))\r\n    .map((stateSplitted) => {\r\n      const [name, parties, count, state, admins] = stateSplitted;\r\n      return [name, { name, parties, count, state, admins }];\r\n    });\r\n\r\n  return new Map(campaignsIterable);\r\n};\r\n\r\nconst _serialize = (campaigns) => {\r\n  let campaignStrs = [];\r\n  /* \r\n    the var {nameCampaign} is because this field is of the following format\r\n    [<campaign name>, <campaign deserialized data>]\r\n    Such as:\r\n    [\r\n      'campaign_name',\r\n      {\r\n        name: 'campaign_name',\r\n        parties: \"likud,kachol-lavan\",\r\n        count: '120,23',\r\n        state: 'OPEN',\r\n        admins: \"12as3..ds94jf,s8a7...394mfh\"\r\n      }\r\n    ]\r\n    That is a special form to give to a map constructor\r\n    so it builds the following map:\r\n    Map {\r\n      'campaign_name' => {\r\n        name: \"campaign_name\",\r\n        parties: \"likud,kachol-lavan\",\r\n        count: '120,23',\r\n        state: 'OPEN',\r\n        admins: \"12as3..ds94jf,s8a7...394mfh\"\r\n      }\r\n    }\r\n  */\r\n  for (const nameCampaign of campaigns) {\r\n    const [name, campaign] = nameCampaign;\r\n    const { parties, count, state, admins } = campaign;\r\n    campaignStrs.push([name, parties, count, state, admins].join(\";\"));\r\n  }\r\n  campaignStrs.sort();\r\n  return Buffer.from(campaignStrs.join(\"|\"));\r\n};\r\nconst _campaignToString = (campaign) => {\r\n  let { name, parties, count, state } = campaign;\r\n  // PARSE NUMBERS!!!!!!!!!!!!!!!\r\n  count = count.split(\",\").map((num) => parseInt(num));\r\n  parties = parties.split(\",\");\r\n  let res = [`Campaign: ${name}`, `Status: ${state}`];\r\n  const sum = count.reduce((acc, curr) => acc + curr, 0);\r\n  const voteStatus = {};\r\n  for (const ind in parties) {\r\n    const party = parties[ind];\r\n    const partyCount = count[ind];\r\n    voteStatus[party] = (partyCount / sum) * 100;\r\n  }\r\n\r\n  res = res.concat(\r\n    parties.map(\r\n      (party, ind) =>\r\n        `${party}: ${\"|\".repeat(Math.round(voteStatus[party]))}${\"-\".repeat(\r\n          100 - Math.round(voteStatus[party])\r\n        )} ${count[ind]}(${voteStatus[party]}%)`\r\n    )\r\n  );\r\n  return res.join(\"\\n\");\r\n};\r\nmodule.exports = {\r\n  CAMP_NAMESPACE,\r\n  CAMP_FAMILY,\r\n  _serialize,\r\n  _deserialize,\r\n  _makeCampaignAddress,\r\n  _campaignToString,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}