{"ast":null,"code":"const {\n  _hash\n} = require(\"./utils\");\n\nconst CAMP_FAMILY = \"votingSystem\";\n\nconst CAMP_NAMESPACE = _hash(CAMP_FAMILY).substring(0, 6);\n\nconst _makeCampaignAddress = x => CAMP_NAMESPACE + _hash(x);\n\nconst _deserialize = data => {\n  let campaignsIterable = data.split(\"|\").map(stateStr => stateStr.split(\";\")).map(stateSplitted => {\n    const [name, parties, count, state, admins] = stateSplitted;\n    return [name, {\n      name,\n      parties,\n      count,\n      state,\n      admins\n    }];\n  });\n  return new Map(campaignsIterable);\n};\n\nconst _serialize = campaigns => {\n  let campaignStrs = [];\n  /* \r\n    the var {nameCampaign} is because this field is of the following format\r\n    [<campaign name>, <campaign deserialized data>]\r\n    Such as:\r\n    [\r\n      'campaign_name',\r\n      {\r\n        name: 'campaign_name',\r\n        parties: \"likud,kachol-lavan\",\r\n        count: '120,23',\r\n        state: 'OPEN',\r\n        admins: \"12as3..ds94jf,s8a7...394mfh\"\r\n      }\r\n    ]\r\n    That is a special form to give to a map constructor\r\n    so it builds the following map:\r\n    Map {\r\n      'campaign_name' => {\r\n        name: \"campaign_name\",\r\n        parties: \"likud,kachol-lavan\",\r\n        count: '120,23',\r\n        state: 'OPEN',\r\n        admins: \"12as3..ds94jf,s8a7...394mfh\"\r\n      }\r\n    }\r\n  */\n\n  for (const nameCampaign of campaigns) {\n    const [name, campaign] = nameCampaign;\n    const {\n      parties,\n      count,\n      state,\n      admins\n    } = campaign;\n    campaignStrs.push([name, parties, count, state, admins].join(\";\"));\n  }\n\n  campaignStrs.sort();\n  return Buffer.from(campaignStrs.join(\"|\"));\n};\n\nconst _campaignToString = campaign => {\n  let {\n    name,\n    parties,\n    count,\n    state\n  } = campaign; // PARSE NUMBERS!!!!!!!!!!!!!!!\n\n  count = count.split(\",\").map(num => parseInt(num));\n  parties = parties.split(\",\");\n  let res = [`Campaign: ${name}`, `Status: ${state}`];\n  const sum = count.reduce((acc, curr) => acc + curr, 0);\n  const voteStatus = {};\n\n  for (const ind in parties) {\n    const party = parties[ind];\n    const partyCount = count[ind];\n    voteStatus[party] = partyCount / sum * 100;\n  }\n\n  res = res.concat(parties.map((party, ind) => `${party}: ${\"|\".repeat(Math.round(voteStatus[party]))}${\"-\".repeat(100 - Math.round(voteStatus[party]))} ${count[ind]}(${voteStatus[party]}%)`));\n  return res.join(\"\\n\");\n};\n\nmodule.exports = {\n  CAMP_NAMESPACE,\n  CAMP_FAMILY,\n  _serialize,\n  _deserialize,\n  _makeCampaignAddress,\n  _campaignToString\n};","map":{"version":3,"sources":["C:/Users/sagi.levi/DevProjects/sawtooth-dev/client-next/src/BlockchainModules/Family.js"],"names":["_hash","require","CAMP_FAMILY","CAMP_NAMESPACE","substring","_makeCampaignAddress","x","_deserialize","data","campaignsIterable","split","map","stateStr","stateSplitted","name","parties","count","state","admins","Map","_serialize","campaigns","campaignStrs","nameCampaign","campaign","push","join","sort","Buffer","from","_campaignToString","num","parseInt","res","sum","reduce","acc","curr","voteStatus","ind","party","partyCount","concat","repeat","Math","round","module","exports"],"mappings":"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","sourcesContent":["const { _hash } = require(\"./utils\");\r\n\r\nconst CAMP_FAMILY = \"votingSystem\";\r\nconst CAMP_NAMESPACE = _hash(CAMP_FAMILY).substring(0, 6);\r\nconst _makeCampaignAddress = (x) => CAMP_NAMESPACE + _hash(x);\r\nconst _deserialize = (data) => {\r\n  let campaignsIterable = data\r\n    .split(\"|\")\r\n    .map((stateStr) => stateStr.split(\";\"))\r\n    .map((stateSplitted) => {\r\n      const [name, parties, count, state, admins] = stateSplitted;\r\n      return [name, { name, parties, count, state, admins }];\r\n    });\r\n\r\n  return new Map(campaignsIterable);\r\n};\r\n\r\nconst _serialize = (campaigns) => {\r\n  let campaignStrs = [];\r\n  /* \r\n    the var {nameCampaign} is because this field is of the following format\r\n    [<campaign name>, <campaign deserialized data>]\r\n    Such as:\r\n    [\r\n      'campaign_name',\r\n      {\r\n        name: 'campaign_name',\r\n        parties: \"likud,kachol-lavan\",\r\n        count: '120,23',\r\n        state: 'OPEN',\r\n        admins: \"12as3..ds94jf,s8a7...394mfh\"\r\n      }\r\n    ]\r\n    That is a special form to give to a map constructor\r\n    so it builds the following map:\r\n    Map {\r\n      'campaign_name' => {\r\n        name: \"campaign_name\",\r\n        parties: \"likud,kachol-lavan\",\r\n        count: '120,23',\r\n        state: 'OPEN',\r\n        admins: \"12as3..ds94jf,s8a7...394mfh\"\r\n      }\r\n    }\r\n  */\r\n  for (const nameCampaign of campaigns) {\r\n    const [name, campaign] = nameCampaign;\r\n    const { parties, count, state, admins } = campaign;\r\n    campaignStrs.push([name, parties, count, state, admins].join(\";\"));\r\n  }\r\n  campaignStrs.sort();\r\n  return Buffer.from(campaignStrs.join(\"|\"));\r\n};\r\nconst _campaignToString = (campaign) => {\r\n  let { name, parties, count, state } = campaign;\r\n  // PARSE NUMBERS!!!!!!!!!!!!!!!\r\n  count = count.split(\",\").map((num) => parseInt(num));\r\n  parties = parties.split(\",\");\r\n  let res = [`Campaign: ${name}`, `Status: ${state}`];\r\n  const sum = count.reduce((acc, curr) => acc + curr, 0);\r\n  const voteStatus = {};\r\n  for (const ind in parties) {\r\n    const party = parties[ind];\r\n    const partyCount = count[ind];\r\n    voteStatus[party] = (partyCount / sum) * 100;\r\n  }\r\n\r\n  res = res.concat(\r\n    parties.map(\r\n      (party, ind) =>\r\n        `${party}: ${\"|\".repeat(Math.round(voteStatus[party]))}${\"-\".repeat(\r\n          100 - Math.round(voteStatus[party])\r\n        )} ${count[ind]}(${voteStatus[party]}%)`\r\n    )\r\n  );\r\n  return res.join(\"\\n\");\r\n};\r\nmodule.exports = {\r\n  CAMP_NAMESPACE,\r\n  CAMP_FAMILY,\r\n  _serialize,\r\n  _deserialize,\r\n  _makeCampaignAddress,\r\n  _campaignToString,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}