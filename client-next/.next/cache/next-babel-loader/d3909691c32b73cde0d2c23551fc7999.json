{"ast":null,"code":"const {\n  createContext,\n  CryptoFactory\n} = require(\"sawtooth-sdk/signing\");\n\nconst {\n  Secp256k1PrivateKey\n} = require(\"sawtooth-sdk/signing/secp256k1\");\n\nconst generateSigner = privateKeyHex => {\n  const context = createContext(\"secp256k1\");\n  const cryptoFact = new CryptoFactory(context);\n  const privateKey = privateKeyHex ? Secp256k1PrivateKey.fromHex(privateKeyHex.trim()) : context.newRandomPrivateKey();\n  console.log(privateKey.asHex());\n  const signer = cryptoFact.newSigner(privateKey);\n  return signer;\n};\n\nmodule.exports = {\n  generateSigner\n};","map":{"version":3,"sources":["C:/Users/sagi.levi/DevProjects/sawtooth-dev/client-next/src/BlockchainModules/Signer.js"],"names":["createContext","CryptoFactory","require","Secp256k1PrivateKey","generateSigner","privateKeyHex","context","cryptoFact","privateKey","fromHex","trim","newRandomPrivateKey","console","log","asHex","signer","newSigner","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,IAAmCC,OAAO,CAAC,sBAAD,CAAhD;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA0BD,OAAO,CAAC,gCAAD,CAAvC;;AAEA,MAAME,cAAc,GAAIC,aAAD,IAAmB;AACxC,QAAMC,OAAO,GAAGN,aAAa,CAAC,WAAD,CAA7B;AACA,QAAMO,UAAU,GAAG,IAAIN,aAAJ,CAAkBK,OAAlB,CAAnB;AACA,QAAME,UAAU,GAAGH,aAAa,GAC5BF,mBAAmB,CAACM,OAApB,CAA4BJ,aAAa,CAACK,IAAd,EAA5B,CAD4B,GAE5BJ,OAAO,CAACK,mBAAR,EAFJ;AAGAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,UAAU,CAACM,KAAX,EAAZ;AACA,QAAMC,MAAM,GAAGR,UAAU,CAACS,SAAX,CAAqBR,UAArB,CAAf;AACA,SAAOO,MAAP;AACD,CATD;;AAWAE,MAAM,CAACC,OAAP,GAAiB;AACfd,EAAAA;AADe,CAAjB","sourcesContent":["const { createContext, CryptoFactory } = require(\"sawtooth-sdk/signing\");\r\nconst { Secp256k1PrivateKey } = require(\"sawtooth-sdk/signing/secp256k1\");\r\n\r\nconst generateSigner = (privateKeyHex) => {\r\n  const context = createContext(\"secp256k1\");\r\n  const cryptoFact = new CryptoFactory(context);\r\n  const privateKey = privateKeyHex\r\n    ? Secp256k1PrivateKey.fromHex(privateKeyHex.trim())\r\n    : context.newRandomPrivateKey();\r\n  console.log(privateKey.asHex());\r\n  const signer = cryptoFact.newSigner(privateKey);\r\n  return signer;\r\n};\r\n\r\nmodule.exports = {\r\n  generateSigner,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}