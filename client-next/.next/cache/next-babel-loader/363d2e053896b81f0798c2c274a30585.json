{"ast":null,"code":"var _require = require('sawtooth-sdk'),\n    protobuf = _require.protobuf;\n\nvar _require2 = require('text-encoding/lib/encoding'),\n    TextEncoder = _require2.TextEncoder;\n\nvar crypto = require('crypto'); // const createTransactionHeader = (\n//   familyName,\n//   nameToAddressGen,\n//   signer,\n//   payload\n// ) => {\n//   const [name] = payload.split(\",\");\n//   const encoder = new TextEncoder(\"utf8\");\n//   const payloadBytes = encoder.encode(payload);\n//   const transactionHeaderBytes = protobuf.TransactionHeader.encode({\n//     familyName,\n//     familyVersion: \"1.0\",\n//     inputs: [nameToAddressGen(name)],\n//     outputs: [nameToAddressGen(name)],\n//     signerPublicKey: signer.getPublicKey().asHex(),\n//     // In this example, we're signing the batch with the same private key,\n//     // but the batch can be signed by another party, in which case, the\n//     // public key will need to be associated with that key.\n//     batcherPublicKey: signer.getPublicKey().asHex(),\n//     // In this example, there are no dependencies.  This list should include\n//     // an previous transaction header signatures that must be applied for\n//     // this transaction to successfully commit.\n//     // For example,\n//     // dependencies: ['540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a'],\n//     dependencies: [],\n//     nonce: \"\" + Math.random(),\n//     payload_encoding: \"utf8\",\n//     payloadSha512: crypto\n//       .createHash(\"sha512\")\n//       .update(payloadBytes)\n//       .digest(\"hex\"),\n//   }).finish();\n//   return { transactionHeaderBytes, payloadBytes };\n// };\n// const createTransaction = (signer, transactionHeaderBytes, payloadBytes) => {\n//   return protobuf.Transaction.create({\n//     header: transactionHeaderBytes,\n//     headerSignature: signer.sign(transactionHeaderBytes),\n//     payload: payloadBytes,\n//   });\n// };\n\n\nmodule.exports = {// createTransactionHeader,\n  // createTransaction,\n};","map":{"version":3,"sources":["C:/Users/sagi.levi/DevProjects/sawtooth-dev/client-next/src/BlockchainModules/Transaction.js"],"names":["require","protobuf","TextEncoder","crypto","module","exports"],"mappings":"eAAqBA,OAAO,CAAC,cAAD,C;IAApBC,Q,YAAAA,Q;;gBACgBD,OAAO,CAAC,4BAAD,C;IAAvBE,W,aAAAA,W;;AACR,IAAMC,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,CACf;AACA;AAFe,CAAjB","sourcesContent":["const { protobuf } = require('sawtooth-sdk');\r\nconst { TextEncoder } = require('text-encoding/lib/encoding');\r\nconst crypto = require('crypto');\r\n\r\n// const createTransactionHeader = (\r\n//   familyName,\r\n//   nameToAddressGen,\r\n//   signer,\r\n//   payload\r\n// ) => {\r\n//   const [name] = payload.split(\",\");\r\n//   const encoder = new TextEncoder(\"utf8\");\r\n//   const payloadBytes = encoder.encode(payload);\r\n//   const transactionHeaderBytes = protobuf.TransactionHeader.encode({\r\n//     familyName,\r\n//     familyVersion: \"1.0\",\r\n//     inputs: [nameToAddressGen(name)],\r\n//     outputs: [nameToAddressGen(name)],\r\n//     signerPublicKey: signer.getPublicKey().asHex(),\r\n//     // In this example, we're signing the batch with the same private key,\r\n//     // but the batch can be signed by another party, in which case, the\r\n//     // public key will need to be associated with that key.\r\n//     batcherPublicKey: signer.getPublicKey().asHex(),\r\n//     // In this example, there are no dependencies.  This list should include\r\n//     // an previous transaction header signatures that must be applied for\r\n//     // this transaction to successfully commit.\r\n//     // For example,\r\n//     // dependencies: ['540a6803971d1880ec73a96cb97815a95d374cbad5d865925e5aa0432fcf1931539afe10310c122c5eaae15df61236079abbf4f258889359c4d175516934484a'],\r\n//     dependencies: [],\r\n//     nonce: \"\" + Math.random(),\r\n//     payload_encoding: \"utf8\",\r\n//     payloadSha512: crypto\r\n//       .createHash(\"sha512\")\r\n//       .update(payloadBytes)\r\n//       .digest(\"hex\"),\r\n//   }).finish();\r\n//   return { transactionHeaderBytes, payloadBytes };\r\n// };\r\n\r\n// const createTransaction = (signer, transactionHeaderBytes, payloadBytes) => {\r\n//   return protobuf.Transaction.create({\r\n//     header: transactionHeaderBytes,\r\n//     headerSignature: signer.sign(transactionHeaderBytes),\r\n//     payload: payloadBytes,\r\n//   });\r\n// };\r\n\r\nmodule.exports = {\r\n  // createTransactionHeader,\r\n  // createTransaction,\r\n};\r\n"]},"metadata":{},"sourceType":"script"}